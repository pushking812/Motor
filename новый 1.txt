/*Метод  Simulate выполняет моделирование работы мотора.
Данный метод будет имитировать работу мотора управляемого ШИМ-сигналом
в течение определенного времени с определенным шагом.
результаты симуляции - зависимость скорости оборотов, напряжения, ток и потребляемой мощности мотора от скважности управляющего pwm-сигнала
*/
func (m *DCMotor) Simulate() error {
	m.lock.Lock()
	defer m.lock.Unlock()

	// Определяем число итераций моделирования на основе длительности моделирования и шага 
	// моделирования m.SimulationDuration и m.SimulationStep
	{
		// Создаем срезы для хранения значений тока и мощности на каждой итерации моделирования.
		// Выполняем моделирование по шагам.
		// Рассчитываем значение тока для текущей итерации.
		// Ограничиваем ток максимальным значением.
		// Рассчитываем мощность для текущей итерации.
		// Рассчитываем момент для текущей итерации.
		// Обновляем значения свойств мотора для текущей итерации.
		// Ожидаем указанный шаг моделирования m.SimulationStep.
	}
	// Итоговые результаты моделирования сохраняем в m.Results.
	// type Results struct {
	// 		// поля с расчитываемыми значениями в симуляции
	// }
}

// Метод используется для сохранения результата симуляции в файле соответствующего формате
func (m *DCMotor) SaveResult(/функция хэндлер обработки результата/) err {
	// параметры - название и требуемы формат файла (csv или svg)
	// ...
	// вызов хэндлера выполняющего обработку и запись результатов симуляции в файл соответсвующего формата, название файла берется из структуры config.Config и передается хэндлеру аргументом
	// ...
	// обработка ошибок
}

Доступные хэндлеры: `
1. svgout.Output записывает  результаты симуляции m.Results в SVG-файл
Сигнатура: func Output(filename string) error
Описание: Функция реализуется в пакете output/svgout - отвечающем за сохранение результатов симуляции в виде графиков в SVG-формате
тело пакета и функции нужно сгенерировать
2. svgout.Output записывает  результаты симуляции m.Results в SVG-файл
Сигнатура: func Output(filename string) error
Описание: Функция реализуется в пакете output/csvout - отвечающем за запись результатов симуляции в CSV-файл.
Тело пакета и функции нужно сгенерировать`

Пример использования,
`package main
import (
	// требуемые пакеты для работы main
	"github.com/pushking812/motorSim/output/csvout"
	"github.com/pushking812/motorSim/output/svgout"
)

func main() {
	// парсинг конфигурационного файла и параметров командной строки,
	// получение параметров симуляции
	// func parseArgs() *config.Config
	cfg := parseArgs()

	// Моделирование работы мотора и запись результатов в файлы
	// func NewDCMotor(cfg *config.Config) (*DCMotor, error)

	m, err := motor.NewDCMotor(cfg)
	// обработка ошибок

	h:=csvout.Output("file.csv");
	m.SaveResult(h)
	// обработка ошибок

	h=svgout.Output("file.svg");
	m.SaveResult(h)
	// обработка ошибок
}

package config
type Config struct {
	Filename   string  `json:"output_filename"`
	// другие параметры работы программы и симуляции
	// ...
}

package motor
type h func(filename string) error

`


