type DCMotor struct {
	Voltage            float64
	Power              float64
	Current            float64
	Watt               float64
	StatorResistance   float64
	EMConstant         float64
	StatorInductance   float64
	Efficiency         float64
	MaxCurrent         float64
	MaxSpeed           float64
	TorqueConstant     float64
	LoadTorque         float64
	Statres            float64
	Emc                float64
	Statine            float64
	Maxcurr            float64
	Maxspeed           float64
	Moment             float64
	Load               float64
	Start              int
	End                int
	Step               int
	Temperature        int
	Humidity           int
	Pressure           int
	SimulationDuration time.Duration
	SimulationStep     time.Duration
	lock               sync.RWMutex
}

func NewDCMotor(cfg *config.Config) (*DCMotor, error) {
	motorCfg, ok := cfg.MotorConfigurations[cfg.MotorMode]
	if !ok {
		return nil, fmt.Errorf("no configuration found for motor mode: %s", cfg.MotorMode)
	}

	paramsCfg, ok := cfg.MotorParamsConfigurations[cfg.MotorMode]
	if !ok {
		return nil, fmt.Errorf("no parameter configuration found for motor mode: %s", cfg.MotorMode)
	}

	envCfg, ok := cfg.EnvConfigurations[cfg.MotorMode]
	if !ok {
		return nil, fmt.Errorf("no environment configuration found for motor mode: %s", cfg.MotorMode)
	}

	motor := &DCMotor{
		Voltage:     motorCfg.Voltage,
		Watt:        motorCfg.Watt,
		Current:     motorCfg.Current,
		Statres:     motorCfg.Statres,
		Emc:         motorCfg.Emc,
		Statine:     motorCfg.Statine,
		Efficiency:  motorCfg.Efficiency,
		Maxcurr:     motorCfg.Maxcurr,
		Maxspeed:    motorCfg.Maxspeed,
		Moment:      motorCfg.Moment,
		Load:        motorCfg.Load,
		Start:       paramsCfg.Start,
		End:         paramsCfg.End,
		Step:        paramsCfg.Step,
		Temperature: envCfg.Temperature,
		Humidity:    envCfg.Humidity,
		Pressure:    envCfg.Pressure,
	}

	return motor, nil
}