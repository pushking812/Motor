int isDigit(char c) {
	return (c >= '0' && c <= '9' ? 1 : 0);
}

int isAlpha(char c) {
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0);
}

bool isNumber(const char* str) {
  for (int i = 0; str[i] != '\0'; i++) {
    if (!isdigit(str[i])) return false;
  }
  return true;
}

bool isWord(const char* str) {
  for (int i = 0; str[i] != '\0'; i++) {
    if (!isAlpha(str[i])) return false;
  }
  return true;
}

const byte IS_NUMBER = 0x01;
const byte IS_ALPHA = 0x02;

// Функция для парсинга значения команды из строки
// для проверки, что значение либо число, либо слово:
// parseCmdValue(cmd, IS_NUMBER | IS_ALPHA)
int parseCmdValue(const char* cmd, byte flags) {
  Serial.print("Info: parseCmdValue() input: "); Serial.println(cmd);

  char* comma = strchr(cmd, ',');
  if (comma == NULL) {
    Serial.println("Error: Invalid command format");
    return -1;
  }
  
  char* value = comma + 1;
  
  Serial.println("Info: parseCmdValue() parsed value: "); Serial.println(value);
  
  if (*value == '\0') {
	Serial.println("Error: Command value is absent");
	return -1;
  }
  
  bool isValueCorrect = false;
  
  if (flags & IS_NUMBER && isNumber(cmd)) isValueCorrect = true;
  if (flags & IS_WORD && isWord(cmd)) isValueCorrect = true;

  if(!isValueCorrect) {
	Serial.print("Error: Command value is incorrect: ");
	if(flags & IS_NUMBER) {
		Serial.println("not number ");
	}
	if(flags & IS_WORD) {
		Serial.println("not word ");
	}
	return -1;
  }

  return atoi(cmd);
}