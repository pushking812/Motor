======================================================================================

Требуется программный код управляющий движением колесного шасси при помощи микроконтроллера Arduino Nano.
Управление движением шасси включает в себя:
- управление скоростью движения шасси в целом, производится путем задания соответствующей скорости вращения отдельных моторов;
- управление направлением движения шасси в целом, производится путем задания направления вращения отдельных моторов;
- управление углом поворота шасси, производится путем установки скорости вращения отдельных моторов;
- задание скорости вращения отдельных моторов, производится путем регулировки скважности ШИМ-сигнала;
- задание направления вращения отдельных моторов, производится путем установки логических уровней цифровых портов.
----------------
Подключение моторов к плате Arduino Nano
Управление производится четырьмя моторами: mLF - левый передний, mLR - левым задним; mRF - правым передним, mRR - правым задним. Моторы подключаются к микроконтроллеру используя два драйвера моторов L293D в конфигурации H-моста. 
К первому драйверу подключаются моторы mLF и mLR, ко второму - моторы mRF и mRR.
Первый драйвер использует для подключения следующие пины: 
- D3 для регулировки скорости вращения мотора mLF;
- D2, D4 - для регулировки направления вращения мотора mLF, 
- D5 для регулировки скорости вращения мотора mLR,
- D7, D8 для регулировки направления вращения мотора mLR. 
Второй драйвер использует для подключения следующие пины:
- D6 для регулировки скорости вращения мотора mRF
- D10, D11 для регулировки направления вращения мотора mRF
- D9 для регулировки скорости вращения мотора mRR
- D12, D13 для регулировки направления вращения мотора mRR.
--------------------------------------------------------------------------------------
Алгоритм работы программы управления моторами следующий:
Параметры управляющие движением шасси - Speed скорость шасси, Direction направление движения шасси, угол поворота шасси Angle. Определены в виде глобальных переменных и задаются пользователем при помощи команд по последовательному порту. 
1. В главном цикле вызывается функция parseCmd, которая получает, проверяет и обрабатывает команды последовательного порта. 
2. После валидации команды parseCmd задает значениях глобальных переменных Speed, Direction и Angle, в соответствии с полученными командами. 
3. После чего parseCmd вызывает функцию isChange, которая отслеживает измененились ли переменные Speed, Direction и Angle. Если переменные изменились, то, в зависимости от того какая переменная изменилась, isChange вызвывает соответствующий обработчик - одну из функций setSpeed, setDirection или setAngle.   
4. Функции setSpeed, setDirection и setAngle, в свою очередь, путем вызова функций setMotorSpeed и setMotorDirection и задания их параметров - изменяют скорость и направление движения, а также угол поворота шасси.
5. Функция setMotorSpeed, в соответствии с переданными параметрами, устанавливает требуемую скорость вращения мотора.
6. Функция setMotorDirection, в соответствии с переданными параметрами, устанавливает требуемую направление вращения мотора.
7. Перейти к пункту 1.
--------------------------------------------------------------------------------------
Общие требования к программному коду
- не желательно использовать промежуточные переменные;
- нельзя использовать переменные типа String;
- для строковых переменных использовать массивы char.
- не использовать функций с динамическим выделением памяти;
- использовать константы вместо магических чисел;
- использовать структуры для группировки связанных данных 
- в коде обязательно наличие комментариев.
--------------------------------------------------------------------------------------
Далее идет описание функции setMotorSpeed
Функция void setMotorSpeed(int motor, int spd), устанавливает скорость вращения мотора. Использует глобальные массивы - speedPins[][] и speed[], определенные ранее. Параметр функции motor - номер мотора (от 1 до 4) для которого задается скорость вращения. Параметр функции spd - заданный процент от максимальной скорости вращения мотора (от 0 до 100). 
Функция setMotorSpeed выполняет следующие действия: 
- проверяет допустимость значений параметров;
- при недопустимых значениях параметров, выводит сообщение об ошибке в последовательный порт;
- при помощи map соотносит скорость вращения spd с параметром скважности ШИМ;
- сохраняет заданную скорость в массиве speed[];
- при помощи analogWrite устанавливает требуемую скорость вращения на пине speedPins[][].
Дополнение к описанию функции setMotorSpeed:
Функция map используется для преобразования заданного процента скорости в величину, соответствующую заданному интервалу ШИМ-сигнала, который управляет скоростью вращения мотора.
--------------------------------------------------------------------------------------
Далее идет описание функции setMotorDirection
Функция void setMotorDirection(int motor, int speed), устанавливает направление вращения мотора. Использует глобальные массивы - directionPins[][] и direction[][], определенные ранее. Параметр функции motor - номер мотора (от 1 до 4) для которого задается задается направление вращения двигателя. ; 
Параметр функции dir - направление вращения мотора (1 или -1), где 1 и -1 соответствует разным направлениям вращения мотора.

Далее идет уточнение описания функции setMotorDirection
Функция setMotorDirection выполняет следующие действия:
- проверяет допустимость значений параметров;
- при недопустимых значениях параметров, выводит сообщение об ошибке в последовательный порт;
- сохраняет параметр направления в массиве direction[][];
- используя digitalWrite установливает соответствующие логических уровни на пине directionPins[][].

Далее идет уточнение описания функции setMotorDirection
Дополнение к описанию функции setMotorDirection:
Функция setMotorDirection используется для установки направления вращения мотора в зависимости от заданного направления движения шасси. Она вызывается внутри функции setDirection для каждого мотора, и направление вращения моторов устанавливается в соответствии с направлением движения шасси.
Параметр motor задает номер мотора, для которого задается направление вращения двигателя.
Параметр dir задает направление вращения мотора, где 1 соответствует направлению "вперед", а -1 соответствует направлению "назад".
Для сохранения направления вращения мотора используется глобальный массив direction[motor-1][].
Номера пинов направления вращения моторов сохраняются в элементах массива directionPins[motor-1][].
Функция setMotorDirection также проверяет допустимость значений параметров.
Для установки направления вращения мотора на соответствующих пинах используется функция digitalWrite. Если направление вращения равно 1, на одном пине устанавливается логический уровень HIGH, а на другом - логический уровень LOW. Если направление вращения равно -1, то меняются местами логические уровни на пинах.
Функция также выводит сообщение об ошибке в последовательный порт, если номер мотора или значение направления вращения недопустимы.
--------------------------------------------------------------------------------------
Изменения в определении функции isChanged:
Функция void isChanged(), сравнивает значениях глобальных переменных Speed, Direction и Angle с prevSpeed, prevDirection, prevAngle соответсвенно и вызывает необходимую функцию обработки при каждом изменении в переменной. 
Используемые глобальные переменные, определенные ранее: 
- глобальные переменные Speed, Direction, Angle - текущие значения скоростей, направлений и угла движения шасси;
- глобальные переменные prevSpeed, prevDirection, prevAngle - предыдущие значения скоростей, направлений и угла движения шасси;
Для обнаружения изменений isChanged сравнивает соответствующие текущие значения этих переменных с предыдущими.
Соответствие отслеживаемых переменных их предыдущим значениям и обработчикам их изменений: 
- глобальная переменная Speed, предыдущее значение prevSpeed, обработчик функция setSpeed;
- глобальная переменная Direction, предыдущее значение prevDirection, обработчик функция setDirection;
- глобальная переменная Angle, предыдущее значение prevAngle, обработчик функция setAngle.

Изменения в определении функции isChanged (уточнение алгоритма работы функции):
В главном цикле программы: 
- вызывается функция parseCmd, которая получает команду из последовательного порта, содержащую новое значение одной из глобальных переменных Speed, Direction или Angle;
- функция parseCmd, проверяет правильность формата команды - при наличии ошибок команда пропускается, выход из функции; 
- функция parseCmd, в переменные prevSpeed, prevDirection или prevAngle, в зависимости от поступившей команды сохраняется текущее значение изменяемой переменной
- в переменные Speed, Direction или Angle устанавливается в новое значение
- вызывается функция isChanged(), которая в свою очередь сравнивает новые значения с предыдущими и при наличии изменений вызывает требуемый обработчик.
--------------------------------------------------------------------------------------
Далее идет описание функции setDirection
Функция void setDirection(), задает направление движения шасси.
Использует глобальные переменные Direction и Speed, определенные ранее.
Использует глобальные константы MLF, MLR, MRF, MRR, определенные ранее.
Функция setDirection выполняет следующие действия:
- при помощи вызовов функции setMotorSpeed останавливает все моторы; 
- при помощи вызовов функции setMotorDirection устанавливает направления вращения для каждого из четырех моторов, в соответствии с действующим значением направления движения шасси;
- путем вызова функций setMotorSpeed устанавливает скорость вращения для каждого из четырех моторов, в соответствии с действующим значением скорости движения шасси;
Дополнение к описанию функции setDirection:
- направление движения шасси определяется значением переменной Direction, которая может быть равна 1 для движения вперед, -1 для движения назад;
- для установки направления движения шасси используется функция setMotorDirection, которая устанавливает направления вращения для каждого из четырех моторов. Для движения вперед или назад устанавливаются одинаковые направления вращения для пары моторов на левой и правой сторонах шасси.
- после установки направлений вращения для каждого мотора, функция setDirection вызывает функцию setMotorSpeed для установки скорости вращения для каждого из четырех моторов в соответствии с действующим значением скорости движения шасси, которая задается переменной Speed.
- для корректировки фактического вращения двигателей используется константа устанавливающую соотношение скоростей моторов на левой и правой сторонах шасси.
- при изменении направления движения шасси происходит остановка всех моторов, чтобы предотвратить возможность движения в неправильном направлении при переключении направления.
- для остановки всех моторов используется функция setMotorSpeed с аргументом 0;
- для движения вперед или назад устанавливаются одинаковые значения скорости для пары моторов на левой и правой сторонах шасси.

Дополнительное описание функции setDirection:

    перед установкой нового направления движения, происходит остановка всех моторов, чтобы предотвратить возможность движения в неправильном направлении при переключении направления.
    для остановки моторов, для каждого мотора вызывается функция setMotorSpeed с аргументом 0;
    для установки нового направления движения шасси, используется функция setMotorDirection, которая устанавливает направления вращения для каждого из четырех моторов. Для движения вперед или назад устанавливаются одинаковые направления вращения для пары моторов на левой и правой сторонах шасси.
    после установки направлений вращения для каждого мотора, функция setDirection вызывает функцию setMotorSpeed для установки скорости вращения для каждого из четырех моторов в соответствии с действующим значением скорости движения шасси, которая задается переменной Speed.
    для корректировки фактического вращения двигателей используется константа устанавливающую соотношение скоростей моторов на левой и правой сторонах шасси.

------------------------------------------------------------------------------------
Функция void setAngle() используется для задания угла поворота шасси.
Использует глобальную переменную Angle, содержащую текущий угол поворота шасси. Функция isChanged отслеживает изменения в переменной Angle и вызывает функцию setAngle при каждом изменении. Angle указывает угол поворота шасси в градусах, принимает числовое значение от -45 до 45, где отрицательные значения соответствуют повороту влево, положительные - вправо, а 0 - движению прямо. 

Дополнение к описанию функции setAngle (уточнение способа осуществления поворота)
Для поворота setAngle уменьшает значение скоростей вращения левой или правой пары моторов относительно скорости шасси Speed. Для изменения скоростей вращения моторов используется функция setMotorSpeed, позволяющая установить скорость вращения мотора в заданный процент от максимальной скорости. 
Для поворота шасси влево (Angle < 0), функция setAngle уменьшает значения скоростей вращения левой пары моторов (mLF и mLR) на процент, равный углу поворота Angle, относительно скорости шасси Speed, а скорости правой пары моторов (mRF и mRR) устанавливаются равными скорости шасси Speed.
Для поворота шасси вправо (Angle > 0), функция setAngle уменьшает значения скоростей вращения правой пары моторов (mRF и mRR) на процент, равный углу поворота Angle, относительно скорости шасси Speed, а скорости левой пары моторов (mLF и mLR) устанавливаются равными скорости шасси Speed.

Дополнение к описанию функции setAngle (уточнение способа вычисления новых значений скоростей вращения моторов)
Для создания разницы скоростей, функция setAngle преобразует заданный угол поворота Angle в разницу между скоростями левых и правых моторов, в виде коэффициента k, задающего отношение скоростей вращения моторов левой и правой пар при повороте. 
Для вычисления новых значений скоростей вращения моторов при повороте влево используется формула:
mLF = Speed * (1 - k); mLR = Speed * (1 - k); mRF = Speed; mRR = Speed;
Для поворота вправо формула будет следующей:
mLF = Speed; mLR = Speed; mRF = Speed * (1 - k); mRR = Speed * (1 - k);
где k - коэффициент, вычисленный по формуле: k = (45 - abs(Angle)) / 45, а abs(Angle) - абсолютное значение угла поворота.
Значения скоростей вращения моторов должны быть установлены при помощи функции setMotorSpeed.

Функция setAngle выполняет действия в следующей последовательности:
- прочитать текущую скорость вращения моторов Angle;
- вычислить новое значение скорости вращения соответствующих моторов;
- установить ее с помощью функции setMotorSpeed.
Дополнение к описанию функции setAngle:
--------------------------------------------------------------------------------------
Функция void setSpeed(). Функция задает скорость движения шасси.
Использует глобальную переменную Speed, определенную ранее. 
Устанавливает значение Angle равным 0.
Задает скорость каждого мотора при помощи функции setMotorSpeed.
Дополнение к описанию функции setSpeed 
    переменная Angle используется для отслеживания изменения скорости движения шасси при поворотах;
    при изменении скорости движения шасси происходит сброс значения Angle на 0, чтобы начать отслеживание изменения скорости при новом движении;
    для установки скорости движения шасси используется функция setMotorSpeed, которая устанавливает скорость вращения для каждого из четырех моторов, в соответствии с действующим значением скорости движения шасси, которая задается переменной Speed.

--------------------------------------------------------------------------------------
Изменения в определении функции parseCmd
Функция void parseCmd(), получает и обрабатывает команды последовательного порта.
Она считывает строку из порта, извлекает код команды и значение, проверяет валидность значения и вызывает соответствующую функцию для обработки команды. Если значение невалидно или код команды неправильный, функция выводит сообщение об ошибке.
Функция parseCmd выполняет следующие действия (уточнение):
Считывает строку из последовательного порта до символа перевода строки ('\n').
Извлекает код команды и значение из строки, используя функции parseCmdCode и parseCmdValue.
Проверяет, есть ли команда с таким кодом в массиве commands, и если есть, вызывает функцию isValidValue для проверки валидности значения команды.
Если значение валидно, вызывает функцию isChanged с кодом команды в качестве аргумента.
Если значение невалидно, выводит сообщение об ошибке "Error: Invalid value" в последовательный порт.
Если код команды неверный, выводит сообщение об ошибке "Error: Invalid command code" в последовательный порт.

Дополнение к описанию функции parseCmd (уточнение формата команд последовательного порта):
"S,N" - команда устанавливающая скорость N движения шасси .
Где S - это код команды,  N скорость движения шасси - числовые значения от 0 до 100, где 0 минимальная скорость, а 100 максимальная. Пример команды задающей скорость движения шасси: "S,50".
"D,N" - команда устанавливающая направление движения шасси N.
Где D - это код команды, N направление движения шасси - числовые значения -1 и 1, где 1 соответствует направлению движения в одну сторону, а -1 - движению в обратном направлении. Пример команды задающей  обратное направление движения шасси: "G,-1".
"A,N" - команда устанавливающая угол N поворота шасси .
Где A - это код команды,  N - угол поворота шасси в градусах по направлению движения - числовые значения от -45 до 45. Т.е. положительные значения это поворот право, а отрицательные поворот влево. Пример команды задающей поворот шасси на 45 градусов влево по направлению движения: "A,-45".
--------------------------------------------------------------------------------------