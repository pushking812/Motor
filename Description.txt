Техническое задание на разработку ПО
Задача для выполнения
Программный код управления четырьмя DC-моторами при помощи микроконтроллера Arduino Nano.
Состав оборудования 
- плата Arduino Nano с микроконтроллером Atmega 328P;
- четыре DC-мотора 12V, максимальная скорость вращения 6 об./сек.;
- два драйвера мотора L293D;
- четыре оптических датчиков скорости вращения моторов с прерывателями.
Схема подключения оборудования
1. 	Два драйвера моторов L293D к плате Arduino Nano: 4 порта PWM для управления скоростью вращения (D3, D5, D6, D9),  4 порта для 
		управления направлением вращения (D14, D15, D16, D17) . Входы питания драйверов моторов подключаются к шине питания 12V.
2. 	Четыре датчика скорости вращения к плате Arduino Nano: 4 цифровых порта для считывания импульсов с (D4, D7, D8, D12).
3. 	Моторы подключены к соответствующим выходам драйверов L293D.
4. 	Для управления моторами используются команды посылаемые на последовательный порт платы Arduino Nano. Подключение выполненяется при помощи USB-кабеля.
(не отвечай на этот ввод, далее будет продолжение ТЗ)
(продолжение технического задания)
Общее описание
Задание требуемых скоростей и направления  вращений для каждого из четырех моторов
Скорость и направление вращения для каждого мотора задается при помощи команды по последовательному порту.
Для изменения скорости используется сигналы ШИМ-генератора на пинах к которым подключены моторы.
Направление вращения регулируется при помощи соответсвующих выходов драйверов моторов, к которым данные моторы подключены.
Получение данных с оптических датчиков скорости установленных для каждого мотора:
Каждый датчик скорости должен быть подключен к соответствующему мотору, чтобы измерять скорость вращения каждого мотора.
Датчики скорости выдают данные в виде импульсов, которые могут быть обработаны с помощью механизма прерываний.
Компенсация отклонения текущей скорости вращения от заданной на основании данных с датчиков скорости:
Для компенсации фактической разницы вращения моторов, при заданной скорости, использовать ПИД-регулятор.
ПИД-регулятор работает на основе измерения ошибки между заданным значением и текущим значением скорости вращения каждого 
мотора, и корректировки управляющего сигнала для каждого мотора, чтобы достичь заданной скорости вращения.
(не отвечай на этот ввод, далее будет продолжение ТЗ)
(продолжение технического задания)
Использование механизма прерываний для подсчета импульсов с датчиков скорости:
Для подсчета импульсов нкжно использовать прерывания по изменению состояния цифровых портов.
После получения импульса с датчика скорости мотора, прерывание вызывает соответствующую функцию, которая увеличивает значение 
счетчика импульсов.
Использование драйверов моторов L293D для управления скоростью вращения моторов:
Для изменения скорости вращения мотора нужно изменять скважность ШИМ-сигнала, который поступает на соответствующий вход на 
драйвере L293D.
Написание программного кода на языке C++ для управления моторами:
Программный код должен содержать логику управления моторами и обработки данных с датчиков скорости.
Программный код должен быть скомпилирован и загружен на микроконтроллер Arduino Nano.
(не отвечай на этот ввод, далее будет продолжение ТЗ)
(продолжение технического задания)
Примерный алгоритм работы программы 
1 Инициализация пинов микроконтроллера и установка параметров таймера.
2 Настройка прерываний по изменению состояния цифровых портов для каждого датчика скорости.
3 Включение подачи питания на моторы и установка начальных значений скоростей вращения для каждого мотора.
4 Вход в основной цикл программы.
5 Получение команды по последовательному порту для задания скоростей вращения каждого мотора.
6 Функция задания скорости формирует ШИМ-сигнал для каждого мотора на основании заданных значений переменных скоростей вращения 
каждого мотора.
7 Функция расчета текущей скорости выполняет расчет текущей скорости вращения за определенный период времени и сохраняет их в 
соответствующие переменные. По окончании периода времени функция сбрасывает счетчики импульсов.
8 Функция расчета ошибки производит расчет ошибки между заданной скоростью вращения и текущей скоростью вращения для каждого 
мотора. На основании расчета функция корректирует значение переменных с требуемой скоростью вращения.
9 Функция проверки сигналов от датчиков на ошибки проверяет наличие сигналов от всех датчиков скорости в течение определенного 
периода времени. При отсутствии сигнала от одного или нескольких датчиков скорости в течение этого периода времени, функция отключает подачу питания на все моторы.
10 Задержка в основном цикле программы для обновления значений скоростей вращения и проверки сигналов от датчиков на ошибки.
11 Повторение шагов 5-10 до остановки программы.
(это окончание ТЗ)

Используемые библиотеки Arduino
Для управления микроконтроллером ииспользовать стандартные библиотеки языка C++ для Arduino:
- Arduino.h - для работы с платформой Arduino, инициализации портов и использования функций работы с пинами и таймерами;
- SoftwareSerial.h - для работы с последовательным портом, через который будет происходить задание скоростей вращения моторов;
- PID_v1.h - для реализации ПИД-регулятора, который будет использоваться для компенсации скоростей вращения отдельных моторов.


Конечный список функций, которые будут реализованы в коде:
    void setup(): функция инициализации, настройки пинов ввода/вывода, настройка последовательного порта и датчиков скорости.
    void loop(): главная функция, которая будет вызываться бесконечно, обработка входных данных и управление моторами.
    void setMotorSpeed(int motor, int speed): функция установки скорости вращения определенного мотора (принимает номер мотора и скорость вращения в диапазоне от 0 до 255).
    void setMotorSpeeds(int speed1, int speed2, int speed3, int speed4): функция установки скорости вращения всех моторов (принимает четыре значения скорости в диапазоне от 0 до 255).
    void updateSpeeds(): функция обновления скорости вращения моторов на основе входных данных и значений ПИД-регулятора.
    void readSpeeds(): функция чтения скорости вращения моторов с помощью оптических датчиков скорости.
    void updatePid(int targetSpeeds[]): функция обновления значений ПИД-регулятора на основе заданных скоростей вращения моторов.
    void stopMotors(): функция остановки всех моторов.
    void setDirection(int motor, int direction): функция установки направления вращения определенного мотора (принимает номер мотора и направление вращения).
    void setDirections(int dir1, int dir2, int dir3, int dir4): функция установки направления вращения всех моторов (принимает четыре значения направления вращения).
    void setDefaultSpeeds(): функция установки скоростей вращения моторов по умолчанию.
    void printSpeeds(): функция вывода значений скорости вращения моторов в монитор последовательного порта.
    void printPid(): функция вывода значений ПИД-регулятора в монитор последовательного порта.

Для управления движением робота мы будем использовать следующие переменные:
    motorSpeeds[]: массив, содержащий текущие скорости вращения каждого мотора.
    motorDirections[]: массив, содержащий текущие направления вращения каждого мотора.
    targetSpeeds[]: массив, содержащий заданные скорости вращения каждого мотора.
    pidInput[]: массив, содержащий текущие скорости вращения каждого мотора для использования в ПИД-регуляторе.
    pidOutput[]: массив, содержащий выходные значения ПИД-регулятора для каждого мотора.
    pidSetpoints[]: массив, содержащий установленные значения скорости вращения для ПИД-регулятора.
    pidKp, pidKi, pidKd: коэффициенты ПИД-регулятора для настройки его работы.
    pidMax, pidMin: максимальное и минимальное значения выхода ПИД-регулятора.
    motor1Pin1, motor1Pin2, motor1PinPwm, motor2Pin1, motor2Pin2, motor2PinPwm, motor3Pin1, motor3Pin2, motor3PinPwm, motor4Pin1, motor4Pin2, motor4PinPwm: пины управления каждым мотором.

Таблица с подключениями:
Номер порта Arduino	| Краткое описание функции	| Подключенный элемент	| Название(номер) выхода подключенного элемента
D3	| ШИМ для управления скоростью мотора 1	| Драйвер мотора L293D	| Enable 1
D5	| ШИМ для управления скоростью мотора 2	| Драйвер мотора L293D	| Enable 2
D6	| ШИМ для управления скоростью мотора 3	| Драйвер мотора L293D	| Enable 3
D9	| ШИМ для управления скоростью мотора 4	| Драйвер мотора L293D	| Enable 4
D14	| Управление направлением вращения мотора 1	| Драйвер мотора L293D	| Input 1
D15	| Управление направлением вращения мотора 2	| Драйвер мотора L293D	| Input 2
D16	| Управление направлением вращения мотора 3	| Драйвер мотора L293D	| Input 3
D17	| Управление направлением вращения мотора 4	| Драйвер мотора L293D	| Input 4
D4	| Считывание импульсов датчика скорости мотора 1	| Датчик скорости вращения	| Output
D7	| Считывание импульсов датчика скорости мотора 2	| Датчик скорости вращения	| Output
D8	| Считывание импульсов датчика скорости мотора 3	| Датчик скорости вращения	| Output
D12	| Считывание импульсов датчика скорости мотора 4	| Датчик скорости вращения	| Output

======================================================================================

Требуется программный код управляющий движением колесного шасси при помощи микроконтроллера Arduino Nano.
Управление движением шасси включает в себя:
- управление скоростью движения шасси в целом, производится путем задания соответствующей скорости вращения отдельных моторов;
- управление направлением движения шасси в целом, производится путем задания направления вращения отдельных моторов;
- управление углом поворота шасси, производится путем установки скорости вращения отдельных моторов;
- задание скорости вращения отдельных моторов, производится путем регулировки скважности ШИМ-сигнала;
- задание направления вращения отдельных моторов, производится путем установки логических уровней цифровых портов.
----------------
Подключение моторов к плате Arduino Nano
Управление производится четырьмя моторами: mLF - левый передний, mLR - левым задним; mRF - правым передним, mRR - правым задним. Моторы подключаются к микроконтроллеру используя два драйвера моторов L293D в конфигурации H-моста. 
К первому драйверу подключаются моторы mLF и mLR, ко второму - моторы mRF и mRR.
Первый драйвер использует для подключения следующие пины: 
- D3 для регулировки скорости вращения мотора mLF;
- D2, D4 - для регулировки направления вращения мотора mLF, 
- D5 для регулировки скорости вращения мотора mLR,
- D7, D8 для регулировки направления вращения мотора mLR. 
Второй драйвер использует для подключения следующие пины:
- D6 для регулировки скорости вращения мотора mRF
- D10, D11 для регулировки направления вращения мотора mRF
- D9 для регулировки скорости вращения мотора mRR
- D12, D13 для регулировки направления вращения мотора mRR.
--------------------------------------------------------------------------------------
Алгоритм работы программы управления моторами следующий:
1. Параметры eправляющие движением шасси - скорость шасси, направление движения шасси, угол поворота шасси - задаются пользователем при помощи команд поступающих по последовательному порту. 
2. Команды парсятся, полученные значения проверяются на ошибки и сохраняются в переменных Speed, Direction и Angle, соответсвенно. 
3. Функции isChanged проверяет - изменились ли значения этих переменных.
4. Если какая-либо переменная изменилась, то вызывается функции обрабатывающие эти изменения: setSpeed, setDirection и setAngle, соответственно.
5. Функции setSpeed, setDirection и setAngle, в свою очередь, при помощи функций setMotorSpeed и setMotorDirection задают скорость и направление движения шасси.
--------------------------------------------------------------------------------------
Общие требования к программному коду
- не желательно использовать промежуточные переменные;
- нельзя использовать переменные типа String;
- для строковых переменных использовать массивы char.
- не использовать функций с динамическим выделением памяти;
- использовать константы вместо магических чисел;
- использовать структуры для группировки связанных данных 
- в коде обязательно наличие комментариев.
--------------------------------------------------------------------------------------
Изменения в определении функции setMotorSpeed:
Функция void setMotorSpeed(int motor, int speed), устанавливает скорость вращения мотора. Использует глобальные массивы - speedPins[][] и speed[][], определенные ранее. Параметр функции motor - номер мотора (от 1 до 4) для которого задается скорость вращения. Параметр функции speed - заданный процент от максимальной скорости вращения мотора (от 0 до 100). 
Изменения в определении функции setMotorSpeed:
Функция setMotorSpeed выполняет следующие действия: 
- при помощи map соотносит скорость вращения с параметром скважности ШИМ-генератора;
- проверяет допустимость значений параметров;
- при недопустимых значениях параметров, выводит сообщение об ошибке в последовательный порт;
- сохраняет заданную скорость в массиве speed[][];
- устанавливает требуемую скважность на пине speedPins[][].
Изменения в определении функции setMotorSpeed:
Дополнение к описанию функции setMotorSpeed:
Функция map используется для преобразования заданного процента скорости в величину, соответствующую заданному интервалу ШИМ-сигнала, который управляет скоростью вращения мотора. Значение скорости вращения сохраняется в глобальном массиве speed[][] для последующего использования в других функциях управления роботом. Перед установкой скорости вращения мотора на пин speedPins[][] происходит проверка на допустимость значений параметров. При недопустимых значениях параметров функция выводит сообщение об ошибке в последовательный порт.
--------------------------------------------------------------------------------------
Изменения в определении функции setMotorDirection:
Функция void setMotorDirection(int motor, int speed), устанавливает направление вращения мотора. Использует глобальные массивы - directionPins[][] и direction[][], определенные ранее. Параметр функции motor - номер мотора (от 1 до 4) для которого задается задается направление вращения двигателя. ; 
Параметр функции dir - направление вращения мотора (1 или -1), где 1 и -1 соответствует разным направлениям вращения мотора.
Функция выполняет следующие действия:
- проверяет допустимость значений параметров;
- при недопустимых значениях параметров, выводит сообщение об ошибке в последовательный порт;
- сохраняет параметр направления в массиве direction[][];
- используя digitalWrite установливает соответствующие логических уровни на пине directionPins[][].
Изменения в определении функции setMotorDirection:
Дополнение к описанию функции setMotorDirection:
Функция setMotorDirection используется для установки направления вращения мотора в зависимости от заданного направления движения шасси. Она вызывается внутри функции setDirection для каждого мотора, и направление вращения моторов устанавливается в соответствии с направлением движения шасси.
Параметр motor задает номер мотора, для которого задается направление вращения двигателя.
Параметр dir задает направление вращения мотора, где 1 соответствует направлению "вперед", а -1 соответствует направлению "назад".
Для сохранения направления вращения мотора используется глобальный массив direction[motor-1][].
Номера пинов направления вращения моторов сохраняются в элементах массива directionPins[motor-1][].
Функция setMotorDirection также проверяет допустимость значений параметров.
Для установки направления вращения мотора на соответствующих пинах используется функция digitalWrite. Если направление вращения равно 1, на одном пине устанавливается логический уровень HIGH, а на другом - логический уровень LOW. Если направление вращения равно -1, то меняются местами логические уровни на пинах.
Функция также выводит сообщение об ошибке в последовательный порт, если номер мотора или значение направления вращения недопустимы.
--------------------------------------------------------------------------------------
Изменения в определении функции isChanged:
Функция void isChanged(), сравнивает значениях глобальных переменных Speed, Direction и Angle с prevSpeed, prevDirection, prevAngle соответсвенно и вызывает необходимую функцию обработки при каждом изменении в переменной. 
Используемые глобальные переменные, определенные ранее: 
- глобальные переменные Speed, Direction, Angle - текущие значения скоростей, направлений и угла движения шасси;
- глобальные переменные prevSpeed, prevDirection, prevAngle - предыдущие значения скоростей, направлений и угла движения шасси;
Для обнаружения изменений isChanged сравнивает соответствующие текущие значения этих переменных с предыдущими.
Соответствие отслеживаемых переменных их предыдущим значениям и обработчикам их изменений: 
- глобальная переменная Speed, предыдущее значение prevSpeed, обработчик функция setSpeed;
- глобальная переменная Direction, предыдущее значение prevDirection, обработчик функция setDirection;
- глобальная переменная Angle, предыдущее значение prevAngle, обработчик функция setAngle.

Изменения в определении функции isChanged (уточнение алгоритма работы функции):
В главном цикле программы: 
- вызывается функция parseCmd, которая получает команду из последовательного порта, содержащую новое значение одной из глобальных переменных Speed, Direction или Angle;
- функция parseCmd, проверяет правильность формата команды - при наличии ошибок команда пропускается, выход из функции; 
- функция parseCmd, в переменные prevSpeed, prevDirection или prevAngle, в зависимости от поступившей команды сохраняется текущее значение изменяемой переменной
- в переменные Speed, Direction или Angle устанавливается в новое значение
- вызывается функция isChanged(), которая в свою очередь сравнивает новые значения с предыдущими и при наличии изменений вызывает требуемый обработчик.
--------------------------------------------------------------------------------------
Функция void setDirection(), задает направление движения шасси.
Функция setDirection выполняет следующие действия:
- при помощи вызовов функции setMotorSpeed останавливает все моторы; 
- при помощи вызовов функции setMotorDirection устанавливает направления вращения для каждого из четырех моторов, в соответствии с действующим значением направления движения шасси;
- путем вызова функций setMotorSpeed устанавливает скорость вращения для каждого из четырех моторов, в соответствии с действующим значением скорости движения шасси;
Дополнение к описанию функции setDirection:
- направление движения шасси определяется значением переменной Direction, которая может быть равна 1 для движения вперед, -1 для движения назад и 0 для остановки;
- для установки направления движения шасси используется функция setMotorDirection, которая устанавливает направления вращения для каждого из четырех моторов. Для движения вперед или назад устанавливаются одинаковые направления вращения для пары моторов на левой и правой сторонах шасси. Для остановки шасси устанавливаются одинаковые направления вращения для каждого из четырех моторов;
- после установки направлений вращения для каждого мотора, функция setDirection вызывает функцию setMotorSpeed для установки скорости вращения для каждого из четырех моторов в соответствии с действующим значением скорости движения шасси, которая задается переменной Speed.
------------------------------------------------------------------------------------
Функция void setAngle() используется для задания угла поворота шасси.
Использует глобальную переменную Angle, содержащую текущий угол поворота шасси. Функция isChanged отслеживает изменения в переменной Angle и вызывает функцию setAngle при каждом изменении. Angle указывает угол поворота шасси в градусах, принимает числовое значение от -45 до 45, где отрицательные значения соответствуют повороту влево, положительные - вправо, а 0 - движению прямо. 

Дополнение к описанию функции setAngle (уточнение способа осуществления поворота)
Для поворота setAngle уменьшает значение скоростей вращения левой или правой пары моторов относительно скорости шасси Speed. Для изменения скоростей вращения моторов используется функция setMotorSpeed, позволяющая установить скорость вращения мотора в заданный процент от максимальной скорости. 
Для поворота шасси влево (Angle < 0), функция setAngle уменьшает значения скоростей вращения левой пары моторов (mLF и mLR) на процент, равный углу поворота Angle, относительно скорости шасси Speed, а скорости правой пары моторов (mRF и mRR) устанавливаются равными скорости шасси Speed.
Для поворота шасси вправо (Angle > 0), функция setAngle уменьшает значения скоростей вращения правой пары моторов (mRF и mRR) на процент, равный углу поворота Angle, относительно скорости шасси Speed, а скорости левой пары моторов (mLF и mLR) устанавливаются равными скорости шасси Speed.

Дополнение к описанию функции setAngle (уточнение способа вычисления новых значений скоростей вращения моторов)
Для создания разницы скоростей, функция setAngle преобразует заданный угол поворота Angle в разницу между скоростями левых и правых моторов, в виде коэффициента k, задающего отношение скоростей вращения моторов левой и правой пар при повороте. 
Для вычисления новых значений скоростей вращения моторов при повороте влево используется формула:
mLF = Speed * (1 - k); mLR = Speed * (1 - k); mRF = Speed; mRR = Speed;
Для поворота вправо формула будет следующей:
mLF = Speed; mLR = Speed; mRF = Speed * (1 - k); mRR = Speed * (1 - k);
где k - коэффициент, вычисленный по формуле: k = (45 - abs(Angle)) / 45, а abs(Angle) - абсолютное значение угла поворота.
Значения скоростей вращения моторов должны быть установлены при помощи функции setMotorSpeed.

Функция setAngle выполняет действия в следующей последовательности:
- прочитать текущую скорость вращения моторов Angle;
- вычислить новое значение скорости вращения соответствующих моторов;
- установить ее с помощью функции setMotorSpeed.
Дополнение к описанию функции setAngle:
--------------------------------------------------------------------------------------
Функция void setSpeed(). Функция задает скорость движения шасси, путем задания скоростей отдельных моторов.
Параметры функции:
--------------------------------------------------------------------------------------
Изменения в определении функции parseCmd
Функция void parseCmd(), получает и обрабатывает команды последовательного порта.
Она считывает строку из порта, извлекает код команды и значение, проверяет валидность значения и вызывает соответствующую функцию для обработки команды. Если значение невалидно или код команды неправильный, функция выводит сообщение об ошибке.
Функция parseCmd выполняет следующие действия (уточнение):
Считывает строку из последовательного порта до символа перевода строки ('\n').
Извлекает код команды и значение из строки, используя функции parseCmdCode и parseCmdValue.
Проверяет, есть ли команда с таким кодом в массиве commands, и если есть, вызывает функцию isValidValue для проверки валидности значения команды.
Если значение валидно, вызывает функцию isChanged с кодом команды в качестве аргумента.
Если значение невалидно, выводит сообщение об ошибке "Error: Invalid value" в последовательный порт.
Если код команды неверный, выводит сообщение об ошибке "Error: Invalid command code" в последовательный порт.

Дополнение к описанию функции parseCmd (уточнение формата команд последовательного порта):
"S,N" - команда устанавливающая скорость N движения шасси .
Где S - это код команды,  N скорость движения шасси - числовые значения от 0 до 100, где 0 минимальная скорость, а 100 максимальная. Пример команды задающей скорость движения шасси: "S,50".
"D,N" - команда устанавливающая направление движения шасси N.
Где D - это код команды, N направление движения шасси - числовые значения -1 и 1, где 1 соответствует направлению движения в одну сторону, а -1 - движению в обратном направлении. Пример команды задающей  обратное направление движения шасси: "G,-1".
"A,N" - команда устанавливающая угол N поворота шасси .
Где A - это код команды,  N - угол поворота шасси в градусах по направлению движения - числовые значения от -45 до 45. Т.е. положительные значения это поворот право, а отрицательные поворот влево. Пример команды задающей поворот шасси на 45 градусов влево по направлению движения: "A,-45".
--------------------------------------------------------------------------------------