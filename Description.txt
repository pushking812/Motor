Задача:
Программный код управления моторами при помощи микроконтроллера Arduino Nano.
Состав оборудования: 
- Arduino Nano, 
- четыре DC-мотора, 
- два драйвера мотора L293D, 
- четыре оптических датчиков скорости вращения моторов.
Подключение компонентов:
1. Два драйвера моторов L293D к плате Arduino Nano: 4 порта PWM для управления скоростью вращения (D3, D5, D6, D9),  4 порта для управления направлением вращения (D14, D15, D16, D17) . Входы питания драйверов моторов подключаются к шине питания 12V.
2. Четыре датчика скорости вращения к плате Arduino Nano: 4 цифровых порта для считывания импульсов с (D4, D7, D8, D12).
3. Моторы подключены к соответствующим выходам драйверов L293D.
4. Для управления моторами используются цифровые порты TX и RX на плате Arduino Nano. Подключение выполнено с помощью USB-кабеля.
Общее описание
1.	Задание требуемой скорости для каждого из четырех моторов:
o	Скорость для каждого мотора задается при помощи команды по последовательному порту.
2.	Получение данных с оптических датчиков скорости установленных для каждого мотора:
o	Каждый датчик скорости должен быть подключен к соответствующему мотору, чтобы измерять скорость вращения каждого мотора.
o	Датчики скорости выдают данные в виде импульсов, которые могут быть обработаны с помощью механизма прерываний.
3.	Компенсация отклонения текущей скорости вращения от заданной на основании данных с датчиков скорости:
o	Для компенсации фактической разницы вращения моторов, при заданной скорости, использовать ПИД-регулятор.
o	ПИД-регулятор работает на основе измерения ошибки между заданным значением и текущим значением скорости вращения каждого мотора, и корректировки управляющего сигнала для каждого мотора, чтобы достичь заданной скорости вращения.
4.	Использование механизма прерываний для подсчета импульсов с датчиков скорости:
o	Для подсчета импульсов можно использовать прерывания по изменению состояния цифровых портов.
o	После получения импульса с датчика скорости мотора, прерывание вызывает соответствующую функцию, которая увеличивает значение счетчика импульсов.
5.	Использование драйверов моторов L293D для управления скоростью вращения моторов:
o	Для изменения скорости вращения мотора нужно изменять скважность ШИМ-сигнала, который поступает на соответствующий вход на драйвере L293D.
6.	Написание программного кода на языке C++ для управления моторами:
o	Программный код должен содержать логику управления моторами и обработки данных с датчиков скорости.
o	Программный код должен быть скомпилирован и загружен на микроконтроллер Arduino Nano.
Примерный алгоритм работы программы 
1 Инициализация пинов микроконтроллера и установка параметров таймера.
2  Настройка прерываний по изменению состояния цифровых портов для каждого датчика скорости.
3  Включение подачи питания на моторы и установка начальных значений скоростей вращения для каждого мотора.
4  Вход в основной цикл программы.
5  Получение команды по последовательному порту для задания скоростей вращения каждого мотора.
6  Функция задания скорости формирует ШИМ-сигнал для каждого мотора на основании заданных значений переменных скоростей вращения каждого мотора.
7  Функция расчета текущей скорости выполняет расчет текущей скорости вращения за определенный период времени и сохраняет их в соответствующие переменные. По окончании периода времени функция сбрасывает счетчики импульсов.


Примерный алгоритм работы программы (продолжение)
8  Функция расчета ошибки производит расчет ошибки между заданной скоростью вращения и текущей скоростью вращения для каждого мотора. На основании расчета функция корректирует значение переменных с требуемой скоростью вращения.
9  Функция проверки сигналов от датчиков на ошибки проверяет наличие сигналов от всех датчиков скорости в течение определенного периода времени. При отсутствии сигнала от одного или нескольких датчиков скорости в течение этого периода времени, функция отключает подачу питания на все моторы.
10 Задержка в основном цикле программы для обновления значений скоростей вращения и проверки сигналов от датчиков на ошибки.
11 Повторение шагов 5-10 до остановки программы.
