Техническое задание на разработку ПО
Задача для выполнения
Программный код управления четырьмя DC-моторами при помощи микроконтроллера Arduino Nano.
Состав оборудования 
- плата Arduino Nano с микроконтроллером Atmega 328P;
- четыре DC-мотора 12V, максимальная скорость вращения 6 об./сек.;
- два драйвера мотора L293D;
- четыре оптических датчиков скорости вращения моторов с прерывателями.
Схема подключения оборудования
1. 	Два драйвера моторов L293D к плате Arduino Nano: 4 порта PWM для управления скоростью вращения (D3, D5, D6, D9),  4 порта для 
		управления направлением вращения (D14, D15, D16, D17) . Входы питания драйверов моторов подключаются к шине питания 12V.
2. 	Четыре датчика скорости вращения к плате Arduino Nano: 4 цифровых порта для считывания импульсов с (D4, D7, D8, D12).
3. 	Моторы подключены к соответствующим выходам драйверов L293D.
4. 	Для управления моторами используются команды посылаемые на последовательный порт платы Arduino Nano. Подключение выполненяется при помощи USB-кабеля.
(не отвечай на этот ввод, далее будет продолжение ТЗ)
(продолжение технического задания)
Общее описание
Задание требуемых скоростей и направления  вращений для каждого из четырех моторов
Скорость и направление вращения для каждого мотора задается при помощи команды по последовательному порту.
Для изменения скорости используется сигналы ШИМ-генератора на пинах к которым подключены моторы.
Направление вращения регулируется при помощи соответсвующих выходов драйверов моторов, к которым данные моторы подключены.
Получение данных с оптических датчиков скорости установленных для каждого мотора:
Каждый датчик скорости должен быть подключен к соответствующему мотору, чтобы измерять скорость вращения каждого мотора.
Датчики скорости выдают данные в виде импульсов, которые могут быть обработаны с помощью механизма прерываний.
Компенсация отклонения текущей скорости вращения от заданной на основании данных с датчиков скорости:
Для компенсации фактической разницы вращения моторов, при заданной скорости, использовать ПИД-регулятор.
ПИД-регулятор работает на основе измерения ошибки между заданным значением и текущим значением скорости вращения каждого 
мотора, и корректировки управляющего сигнала для каждого мотора, чтобы достичь заданной скорости вращения.
(не отвечай на этот ввод, далее будет продолжение ТЗ)
(продолжение технического задания)
Использование механизма прерываний для подсчета импульсов с датчиков скорости:
Для подсчета импульсов нкжно использовать прерывания по изменению состояния цифровых портов.
После получения импульса с датчика скорости мотора, прерывание вызывает соответствующую функцию, которая увеличивает значение 
счетчика импульсов.
Использование драйверов моторов L293D для управления скоростью вращения моторов:
Для изменения скорости вращения мотора нужно изменять скважность ШИМ-сигнала, который поступает на соответствующий вход на 
драйвере L293D.
Написание программного кода на языке C++ для управления моторами:
Программный код должен содержать логику управления моторами и обработки данных с датчиков скорости.
Программный код должен быть скомпилирован и загружен на микроконтроллер Arduino Nano.
(не отвечай на этот ввод, далее будет продолжение ТЗ)
(продолжение технического задания)
Примерный алгоритм работы программы 
1 Инициализация пинов микроконтроллера и установка параметров таймера.
2 Настройка прерываний по изменению состояния цифровых портов для каждого датчика скорости.
3 Включение подачи питания на моторы и установка начальных значений скоростей вращения для каждого мотора.
4 Вход в основной цикл программы.
5 Получение команды по последовательному порту для задания скоростей вращения каждого мотора.
6 Функция задания скорости формирует ШИМ-сигнал для каждого мотора на основании заданных значений переменных скоростей вращения 
каждого мотора.
7 Функция расчета текущей скорости выполняет расчет текущей скорости вращения за определенный период времени и сохраняет их в 
соответствующие переменные. По окончании периода времени функция сбрасывает счетчики импульсов.
8 Функция расчета ошибки производит расчет ошибки между заданной скоростью вращения и текущей скоростью вращения для каждого 
мотора. На основании расчета функция корректирует значение переменных с требуемой скоростью вращения.
9 Функция проверки сигналов от датчиков на ошибки проверяет наличие сигналов от всех датчиков скорости в течение определенного 
периода времени. При отсутствии сигнала от одного или нескольких датчиков скорости в течение этого периода времени, функция отключает подачу питания на все моторы.
10 Задержка в основном цикле программы для обновления значений скоростей вращения и проверки сигналов от датчиков на ошибки.
11 Повторение шагов 5-10 до остановки программы.
(это окончание ТЗ)

Используемые библиотеки Arduino
Для управления микроконтроллером ииспользовать стандартные библиотеки языка C++ для Arduino:
- Arduino.h - для работы с платформой Arduino, инициализации портов и использования функций работы с пинами и таймерами;
- SoftwareSerial.h - для работы с последовательным портом, через который будет происходить задание скоростей вращения моторов;
- PID_v1.h - для реализации ПИД-регулятора, который будет использоваться для компенсации скоростей вращения отдельных моторов.


Конечный список функций, которые будут реализованы в коде:
    void setup(): функция инициализации, настройки пинов ввода/вывода, настройка последовательного порта и датчиков скорости.
    void loop(): главная функция, которая будет вызываться бесконечно, обработка входных данных и управление моторами.
    void setMotorSpeed(int motor, int speed): функция установки скорости вращения определенного мотора (принимает номер мотора и скорость вращения в диапазоне от 0 до 255).
    void setMotorSpeeds(int speed1, int speed2, int speed3, int speed4): функция установки скорости вращения всех моторов (принимает четыре значения скорости в диапазоне от 0 до 255).
    void updateSpeeds(): функция обновления скорости вращения моторов на основе входных данных и значений ПИД-регулятора.
    void readSpeeds(): функция чтения скорости вращения моторов с помощью оптических датчиков скорости.
    void updatePid(int targetSpeeds[]): функция обновления значений ПИД-регулятора на основе заданных скоростей вращения моторов.
    void stopMotors(): функция остановки всех моторов.
    void setDirection(int motor, int direction): функция установки направления вращения определенного мотора (принимает номер мотора и направление вращения).
    void setDirections(int dir1, int dir2, int dir3, int dir4): функция установки направления вращения всех моторов (принимает четыре значения направления вращения).
    void setDefaultSpeeds(): функция установки скоростей вращения моторов по умолчанию.
    void printSpeeds(): функция вывода значений скорости вращения моторов в монитор последовательного порта.
    void printPid(): функция вывода значений ПИД-регулятора в монитор последовательного порта.

Для управления движением робота мы будем использовать следующие переменные:
    motorSpeeds[]: массив, содержащий текущие скорости вращения каждого мотора.
    motorDirections[]: массив, содержащий текущие направления вращения каждого мотора.
    targetSpeeds[]: массив, содержащий заданные скорости вращения каждого мотора.
    pidInput[]: массив, содержащий текущие скорости вращения каждого мотора для использования в ПИД-регуляторе.
    pidOutput[]: массив, содержащий выходные значения ПИД-регулятора для каждого мотора.
    pidSetpoints[]: массив, содержащий установленные значения скорости вращения для ПИД-регулятора.
    pidKp, pidKi, pidKd: коэффициенты ПИД-регулятора для настройки его работы.
    pidMax, pidMin: максимальное и минимальное значения выхода ПИД-регулятора.
    motor1Pin1, motor1Pin2, motor1PinPwm, motor2Pin1, motor2Pin2, motor2PinPwm, motor3Pin1, motor3Pin2, motor3PinPwm, motor4Pin1, motor4Pin2, motor4PinPwm: пины управления каждым мотором.

Таблица с подключениями:
Номер порта Arduino	| Краткое описание функции	| Подключенный элемент	| Название(номер) выхода подключенного элемента
D3	| ШИМ для управления скоростью мотора 1	| Драйвер мотора L293D	| Enable 1
D5	| ШИМ для управления скоростью мотора 2	| Драйвер мотора L293D	| Enable 2
D6	| ШИМ для управления скоростью мотора 3	| Драйвер мотора L293D	| Enable 3
D9	| ШИМ для управления скоростью мотора 4	| Драйвер мотора L293D	| Enable 4
D14	| Управление направлением вращения мотора 1	| Драйвер мотора L293D	| Input 1
D15	| Управление направлением вращения мотора 2	| Драйвер мотора L293D	| Input 2
D16	| Управление направлением вращения мотора 3	| Драйвер мотора L293D	| Input 3
D17	| Управление направлением вращения мотора 4	| Драйвер мотора L293D	| Input 4
D4	| Считывание импульсов датчика скорости мотора 1	| Датчик скорости вращения	| Output
D7	| Считывание импульсов датчика скорости мотора 2	| Датчик скорости вращения	| Output
D8	| Считывание импульсов датчика скорости мотора 3	| Датчик скорости вращения	| Output
D12	| Считывание импульсов датчика скорости мотора 4	| Датчик скорости вращения	| Output
